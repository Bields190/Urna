# -*- coding: utf-8 -*-
"""
Configura√ß√£o e Sistema de Email para Urna Eletr√¥nica
===================================================

Este arquivo cont√©m as configura√ß√µes e funcionalidades completas para envio de emails.
Sistema robusto com fallback autom√°tico entre yagmail e smtplib nativo.
"""

import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime

# Configura√ß√µes do email (ATEN√á√ÉO: Use vari√°veis de ambiente em produ√ß√£o!)
EMAIL_SISTEMA = os.getenv('URNA_EMAIL', 'ufac.urna@gmail.com')
SENHA_EMAIL = os.getenv('URNA_EMAIL_PASSWORD', 'hanm anjk owxc cdjv')  # Use senha de app do Gmail
SMTP_SERVER = os.getenv('URNA_SMTP_SERVER', 'smtp.gmail.com')
SMTP_PORT = int(os.getenv('URNA_SMTP_PORT', '587'))

def _verificar_yagmail():
    """Verifica se yagmail est√° dispon√≠vel"""
    try:
        import yagmail
        return True
    except ImportError:
        return False

def enviar_comprovante_voto(email_destino, eleicao_titulo, data_voto, codigo_verificacao):
    """
    Envia comprovante de voto por email
    
    Args:
        email_destino (str): Email do eleitor
        eleicao_titulo (str): T√≠tulo da elei√ß√£o
        data_voto (str): Data e hora do voto
        codigo_verificacao (str): C√≥digo de verifica√ß√£o do voto
        
    Returns:
        bool: True se enviado com sucesso, False caso contr√°rio
    """
    
    assunto = f"Comprovante de Voto - {eleicao_titulo}"
    
    conteudo = f"""üó≥Ô∏è COMPROVANTE DE VOTO ELETR√îNICO

Elei√ß√£o: {eleicao_titulo}
Data/Hora: {data_voto}
C√≥digo de Verifica√ß√£o: {codigo_verificacao}

‚úÖ Seu voto foi registrado com sucesso!

Este comprovante confirma que voc√™ participou do processo eleitoral.
O anonimato do seu voto est√° garantido pelo sistema.

=== IMPORTANTE ===
‚Ä¢ Guarde este comprovante para seus registros
‚Ä¢ O c√≥digo de verifica√ß√£o pode ser usado para auditoria
‚Ä¢ Seu voto √© secreto e n√£o pode ser identificado

=== SISTEMA DE URNA ELETR√îNICA ===
Data de gera√ß√£o: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}

Obrigado por participar do processo democr√°tico!
"""
    
    # Tentar enviar com yagmail primeiro (mais simples)
    if _verificar_yagmail():
        if _enviar_com_yagmail(email_destino, assunto, conteudo):
            return True
    
    # Fallback para smtplib nativo
    return _enviar_com_smtplib(email_destino, assunto, conteudo)

def _enviar_com_yagmail(email_destino, assunto, conteudo):
    """Envia email usando yagmail"""
    try:
        import yagmail
        yag = yagmail.SMTP(EMAIL_SISTEMA, SENHA_EMAIL)
        yag.send(
            to=email_destino,
            subject=assunto,
            contents=conteudo
        )
        print(f"‚úÖ Email enviado via yagmail para: {email_destino}")
        return True
    except Exception as e:
        print(f"‚ùå Erro com yagmail: {e}")
        return False

def _enviar_com_smtplib(email_destino, assunto, conteudo):
    """Envia email usando smtplib nativo"""
    try:
        # Criar mensagem
        msg = MIMEMultipart()
        msg['From'] = EMAIL_SISTEMA
        msg['To'] = email_destino
        msg['Subject'] = assunto
        
        # Adicionar conte√∫do
        msg.attach(MIMEText(conteudo, 'plain', 'utf-8'))
        
        # Conectar e enviar
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL_SISTEMA, SENHA_EMAIL)
            texto = msg.as_string()
            server.sendmail(EMAIL_SISTEMA, email_destino, texto)
        
        print(f"‚úÖ Email enviado via smtplib para: {email_destino}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro com smtplib: {e}")
        return False

def configurar_email_sistema():
    """
    Configura o email do sistema para envio de comprovantes.
    
    Esta fun√ß√£o deve ser executada UMA VEZ para configurar as credenciais.
    Exemplo de uso:
    
    ```python
    from config_email import configurar_email_sistema
    configurar_email_sistema()
    ```
    """
    try:
        if _verificar_yagmail():
            import yagmail
            # Registrar credenciais no yagmail
            yagmail.register(EMAIL_SISTEMA, SENHA_EMAIL)
            print(f"‚úÖ Email configurado: {EMAIL_SISTEMA}")
        else:
            print(f"‚ö†Ô∏è Yagmail n√£o dispon√≠vel, usando smtplib nativo")
            print(f"‚úÖ Email configurado: {EMAIL_SISTEMA}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar email: {e}")
        return False

def testar_envio_email(email_teste="teste@exemplo.com"):
    """
    Testa o envio de email.
    
    Args:
        email_teste (str): Email para teste
        
    Returns:
        bool: True se teste passou, False caso contr√°rio
    """
    print(f"üß™ Testando envio de email para: {email_teste}")
    
    if _verificar_yagmail():
        print("üìß Testando com yagmail...")
        if _testar_yagmail(email_teste):
            return True
    
    print("üìß Testando com smtplib...")
    return _testar_smtplib(email_teste)

def _testar_yagmail(email_teste):
    """Testa envio com yagmail"""
    try:
        import yagmail
        yag = yagmail.SMTP(EMAIL_SISTEMA, SENHA_EMAIL)
        yag.send(
            to=email_teste,
            subject="Teste - Sistema de Urna Eletr√¥nica (yagmail)",
            contents="Este √© um teste do sistema de email usando yagmail.\n\nSe voc√™ recebeu esta mensagem, o sistema est√° funcionando!"
        )
        print("‚úÖ Teste com yagmail: SUCESSO")
        return True
    except Exception as e:
        print(f"‚ùå Teste com yagmail: FALHA - {e}")
        return False

def _testar_smtplib(email_teste):
    """Testa envio com smtplib"""
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_SISTEMA
        msg['To'] = email_teste
        msg['Subject'] = "Teste - Sistema de Urna Eletr√¥nica (smtplib)"
        
        conteudo = "Este √© um teste do sistema de email usando smtplib nativo.\n\nSe voc√™ recebeu esta mensagem, o sistema est√° funcionando!"
        msg.attach(MIMEText(conteudo, 'plain', 'utf-8'))
        
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL_SISTEMA, SENHA_EMAIL)
            texto = msg.as_string()
            server.sendmail(EMAIL_SISTEMA, email_teste, texto)
        
        print("‚úÖ Teste com smtplib: SUCESSO")
        return True
        
    except Exception as e:
        print(f"‚ùå Teste com smtplib: FALHA - {e}")
        return False

def obter_configuracao_email():
    """
    Retorna as configura√ß√µes atuais de email.
    
    Returns:
        dict: Dicion√°rio com as configura√ß√µes
    """
    return {
        'email_sistema': EMAIL_SISTEMA,
        'smtp_server': SMTP_SERVER,
        'smtp_port': SMTP_PORT,
        'yagmail_disponivel': _verificar_yagmail(),
        'configurado': bool(EMAIL_SISTEMA and SENHA_EMAIL)
    }

# Instru√ß√µes de configura√ß√£o
INSTRUCOES_CONFIGURACAO = """
=== CONFIGURA√á√ÉO DO EMAIL PARA URNA ELETR√îNICA ===

1. CONFIGURA√á√ÉO COM GMAIL:
   - Acesse sua conta Google
   - Ative a verifica√ß√£o em 2 etapas
   - Gere uma "senha de app" espec√≠fica
   - Use essa senha, n√£o sua senha normal

2. CONFIGURAR VARI√ÅVEIS DE AMBIENTE:
   
   Linux/Mac:
   export URNA_EMAIL='sistema@gmail.com'
   export URNA_EMAIL_PASSWORD='sua_senha_de_app'
   
   Windows:
   set URNA_EMAIL=sistema@gmail.com
   set URNA_EMAIL_PASSWORD=sua_senha_de_app

3. EXECUTAR CONFIGURA√á√ÉO:
   
   python3 -c "from config_email import configurar_email_sistema; configurar_email_sistema()"

4. TESTAR ENVIO:
   
   python3 -c "from config_email import testar_envio_email; testar_envio_email('seu_email@teste.com')"

=== SEGURAN√áA ===
- NUNCA coloque senhas diretamente no c√≥digo
- Use sempre vari√°veis de ambiente
- Use senhas de app, n√£o senhas pessoais
- Em produ√ß√£o, considere usar servi√ßos como SendGrid, AWS SES, etc.

=== TROUBLESHOOTING ===
- "Application-specific password required": Configure senha de app no Gmail
- "Less secure app access": Use senha de app em vez da configura√ß√£o antiga
- "Authentication failed": Verifique email e senha
- "SMTP connection error": Verifique conex√£o de internet e firewall
"""

if __name__ == "__main__":
    print(INSTRUCOES_CONFIGURACAO)
    
    print("\n=== STATUS ATUAL ===")
    config = obter_configuracao_email()
    print(f"Email do sistema: {config['email_sistema']}")
    print(f"SMTP Server: {config['smtp_server']}:{config['smtp_port']}")
    print(f"Configurado: {'‚úÖ' if config['configurado'] else '‚ùå'}")
    
    if not config['configurado']:
        print("\n‚ö†Ô∏è  Configure as vari√°veis de ambiente antes de usar!")